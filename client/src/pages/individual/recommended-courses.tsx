import { useState, useEffect } from "react";
import { Link, useLocation } from "wouter";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { 
  BookOpen, 
  MapPin, 
  Calendar, 
  DollarSign, 
  Building, 
  ArrowLeft,
  Star,
  Clock,
  Users,
  Filter,
  CheckCircle2,
  Award
} from "lucide-react";
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import type { Course } from "@shared/schema";

interface RecommendedCourse extends Course {
  matchingScore: number;
  matchingReasons: string[];
}

export default function RecommendedCourses() {
  const { user } = useAuth();
  const [location, setLocation] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [appliedCourses, setAppliedCourses] = useState<Set<string>>(new Set());
  const [showApplicationModal, setShowApplicationModal] = useState(false);
  const [selectedCourse, setSelectedCourse] = useState<RecommendedCourse | null>(null);
  
  const { data: recommendedCourses, isLoading } = useQuery<RecommendedCourse[]>({
    queryKey: ['/api/courses/recommended'],
    enabled: !!user,
  });

  const { data: categories } = useQuery<string[]>({
    queryKey: ['/api/courses/categories'],
  });

  const filteredCourses = selectedCategory 
    ? recommendedCourses?.filter(course => course.category === selectedCategory)
    : recommendedCourses;

  // Add education to profile mutation
  const addToResumeMutation = useMutation({
    mutationFn: async (course: RecommendedCourse) => {
      const certificationName = getCertificationName(course.category);
      const educationEntry = `${course.title} ÏàòÎ£å (${course.institution})`;
      
      return await apiRequest('POST', '/api/individual-profiles/add-education', {
        education: educationEntry,
        certification: certificationName,
        skills: [`${course.category} Î∂ÑÏïº Ï†ÑÎ¨∏ÍµêÏú°`, 'Ïò®ÎùºÏù∏ ÌïôÏäµ ÏôÑÏ£º']
      });
    },
    onSuccess: (data, course) => {
      // Remove from applied courses since it's now completed
      setAppliedCourses(prev => {
        const newSet = new Set(prev);
        newSet.delete(course.id);
        return newSet;
      });
      
      // Invalidate profile queries to refresh data
      queryClient.invalidateQueries({ queryKey: ['/api/individual-profiles/me'] });
      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });
      
      toast({
        title: "Ï∂ïÌïòÌï©ÎãàÎã§! üéâ",
        description: "ÏàòÎ£åÏ¶ùÏù¥ Ïù¥Î†•ÏÑúÏóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Ïò§Î•ò Î∞úÏÉù",
        description: error.message || "Ïù¥Î†•ÏÑú ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    }
  });

  const getCertificationName = (category: string): string => {
    if (category.includes('Ï†ïÎ≥¥ÌÜµÏã†')) return 'Ï†ïÎ≥¥Ï≤òÎ¶¨Í∏∞Îä•ÏÇ¨ Í¥ÄÎ†® ÍµêÏú°';
    if (category.includes('ÏùòÎ£å')) return 'ÏùòÎ£åÍ¥ÄÎ¶¨Ìïô Í¥ÄÎ†® ÏûêÍ≤©';
    if (category.includes('Ï†úÏ°∞ÏóÖ')) return 'ÌíàÏßàÍ¥ÄÎ¶¨ Í¥ÄÎ†® ÏûêÍ≤©';
    if (category.includes('ÎßàÏºÄÌåÖ')) return 'ÎîîÏßÄÌÑ∏ÎßàÏºÄÌåÖ Ï†ÑÎ¨∏Í∞Ä Í≥ºÏ†ï';
    if (category.includes('Í±¥ÏÑ§ÏóÖ')) return 'Í±¥ÏÑ§ÏïàÏ†ÑÍ∏∞ÏÇ¨ Í¥ÄÎ†® ÍµêÏú°';
    if (category.includes('Ïö¥Ïàò')) return 'Î¨ºÎ•òÍ¥ÄÎ¶¨ÏÇ¨ Í¥ÄÎ†® Í≥ºÏ†ï';
    if (category.includes('Í≥ºÌïô')) return 'Í∏∞Ïà†ÏÇ¨ Í¥ÄÎ†® Ï†ÑÎ¨∏ÍµêÏú°';
    if (category.includes('ÏòàÏà†')) return 'ÏòàÏà†Ïã¨Î¶¨ÏÉÅÎã¥ÏÇ¨ Í≥ºÏ†ï';
    if (category.includes('Í≥µÍ∏âÏóÖ')) return 'Ïú†ÌÜµÍ¥ÄÎ¶¨ÏÇ¨ Í¥ÄÎ†® ÍµêÏú°';
    return `${category} Î∂ÑÏïº Ï†ÑÎ¨∏Í≥ºÏ†ï`;
  };

  const handleApplyCourse = (course: RecommendedCourse) => {
    setSelectedCourse(course);
    setShowApplicationModal(true);
  };

  const handleConfirmApplication = () => {
    if (selectedCourse) {
      setAppliedCourses(prev => new Set([...Array.from(prev), selectedCourse.id]));
      setShowApplicationModal(false);
      setSelectedCourse(null);
      
      toast({
        title: "Ïã†Ï≤≠ ÏôÑÎ£å!",
        description: `${selectedCourse.title} Í∞ïÏùòÏóê Ïã†Ï≤≠ÎêòÏóàÏäµÎãàÎã§.`,
      });
    }
  };

  const handleCompleteCourse = (course: RecommendedCourse) => {
    addToResumeMutation.mutate(course);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#FFFEF0] to-white">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm border-b border-[#2F3036]/10 sticky top-0 z-10">
        <div className="container-web mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link href="/individual/dashboard">
                <Button variant="ghost" size="sm" className="text-[#2F3036] hover:bg-[#F5F5DC]">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Îí§Î°ú
                </Button>
              </Link>
              <div>
                <h1 className="text-xl font-bold text-[#2F3036]">Ï∂îÏ≤ú Í∞ïÏ¢å</h1>
                <p className="text-sm text-[#2F3036]/70">ÌîÑÎ°úÌïÑÏóê ÎßûÎäî ÎßûÏ∂§ ÍµêÏú°Í≥ºÏ†ïÏùÑ Ï∂îÏ≤úÌï¥ÎìúÎ¶ΩÎãàÎã§</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button variant="outline" size="sm" className="border-[#2F3036]/20 text-[#2F3036] hover:bg-[#F5F5DC]">
                <Filter className="w-4 h-4 mr-2" />
                ÌïÑÌÑ∞
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container-web mx-auto px-4 py-6 pb-20">
        {/* Category Filter */}
        {categories && categories.length > 0 && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="text-[#2F3036] text-lg">Î∂ÑÏïºÎ≥Ñ Í∞ïÏ¢å</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                <Button
                  variant={selectedCategory === null ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(null)}
                  className={selectedCategory === null 
                    ? "bg-[#2F3036] text-white" 
                    : "border-[#2F3036]/20 text-[#2F3036] hover:bg-[#F5F5DC]"
                  }
                >
                  Ï†ÑÏ≤¥
                </Button>
                {categories.map((category) => (
                  <Button
                    key={category}
                    variant={selectedCategory === category ? "default" : "outline"}
                    size="sm"
                    onClick={() => setSelectedCategory(category)}
                    className={selectedCategory === category 
                      ? "bg-[#2F3036] text-white" 
                      : "border-[#2F3036]/20 text-[#2F3036] hover:bg-[#F5F5DC]"
                    }
                  >
                    {category}
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Loading State */}
        {isLoading && (
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <Card key={i}>
                <CardContent className="p-6">
                  <div className="flex items-start space-x-4">
                    <Skeleton className="w-16 h-16 rounded-lg" />
                    <div className="flex-1 space-y-2">
                      <Skeleton className="h-5 w-3/4" />
                      <Skeleton className="h-4 w-1/2" />
                      <Skeleton className="h-4 w-2/3" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Recommended Courses */}
        {filteredCourses && filteredCourses.length > 0 && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold text-[#2F3036]">
                ÎßûÏ∂§ Ï∂îÏ≤ú Í∞ïÏ¢å ({filteredCourses.length}Í∞ú)
              </h2>
            </div>
            
            {filteredCourses.map((course, index) => (
              <Card key={course.id} className="hover:shadow-md transition-shadow border-[#2F3036]/10">
                <CardContent className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-start space-x-4 flex-1">
                      <div className="w-12 h-12 bg-[#F5F5DC] rounded-lg flex items-center justify-center">
                        <BookOpen className="w-6 h-6 text-[#2F3036]" />
                      </div>
                      <div className="flex-1">
                        <div className="flex items-start justify-between">
                          <h3 className="font-semibold text-[#2F3036] text-lg leading-tight mb-2">
                            {course.title}
                          </h3>
                          <Badge className="ml-2 bg-[#F5F5DC] text-[#2F3036] hover:bg-[#F5F5DC]/80">
                            <Star className="w-3 h-3 mr-1" />
                            {course.matchingScore}% Îß§Ïπ≠
                          </Badge>
                        </div>
                        
                        <div className="space-y-3">
                          <div className="bg-[#F5F5DC] rounded-lg p-3">
                            <h4 className="text-sm font-semibold text-[#2F3036] mb-2">Ïù¥Î†•ÏÑúÏóê Ï∂îÍ∞ÄÎê† ÏöîÏÜå</h4>
                            <div className="space-y-1 text-sm text-[#2F3036]/80">
                              <div>‚Ä¢ {course.title} ÏàòÎ£åÏ¶ù</div>
                              <div>‚Ä¢ {course.category} Î∂ÑÏïº ÍµêÏú° Ïù¥Ïàò</div>
                              <div>‚Ä¢ {course.institution} ÍµêÏú°Í∏∞Í¥Ä ÏàòÎ£å</div>
                              {course.category.includes('Ï†ïÎ≥¥ÌÜµÏã†') && <div>‚Ä¢ Ï†ïÎ≥¥Ï≤òÎ¶¨Í∏∞Îä•ÏÇ¨ Í¥ÄÎ†® ÍµêÏú°</div>}
                              {course.category.includes('ÏùòÎ£å') && <div>‚Ä¢ ÏùòÎ£åÍ¥ÄÎ¶¨Ìïô Í¥ÄÎ†® ÏûêÍ≤©</div>}
                              {course.category.includes('Ï†úÏ°∞ÏóÖ') && <div>‚Ä¢ ÌíàÏßàÍ¥ÄÎ¶¨ Í¥ÄÎ†® ÏûêÍ≤©</div>}
                              {course.category.includes('ÎßàÏºÄÌåÖ') && <div>‚Ä¢ ÎîîÏßÄÌÑ∏ÎßàÏºÄÌåÖ Ï†ÑÎ¨∏Í∞Ä Í≥ºÏ†ï</div>}
                              {course.category.includes('Í±¥ÏÑ§ÏóÖ') && <div>‚Ä¢ Í±¥ÏÑ§ÏïàÏ†ÑÍ∏∞ÏÇ¨ Í¥ÄÎ†® ÍµêÏú°</div>}
                              {course.category.includes('Ïö¥Ïàò') && <div>‚Ä¢ Î¨ºÎ•òÍ¥ÄÎ¶¨ÏÇ¨ Í¥ÄÎ†® Í≥ºÏ†ï</div>}
                              {course.category.includes('Í≥ºÌïô') && <div>‚Ä¢ Í∏∞Ïà†ÏÇ¨ Í¥ÄÎ†® Ï†ÑÎ¨∏ÍµêÏú°</div>}
                              {course.category.includes('ÏòàÏà†') && <div>‚Ä¢ ÏòàÏà†Ïã¨Î¶¨ÏÉÅÎã¥ÏÇ¨ Í≥ºÏ†ï</div>}
                              {course.category.includes('Í≥µÍ∏âÏóÖ') && <div>‚Ä¢ Ïú†ÌÜµÍ¥ÄÎ¶¨ÏÇ¨ Í¥ÄÎ†® ÍµêÏú°</div>}
                            </div>
                          </div>
                          
                          <div className="text-xs text-[#2F3036]/60 space-y-1">
                            <div>üè¢ {course.institution}</div>
                            <div>üìÖ {course.duration}</div>
                            <div>üí∞ {course.cost}</div>
                            <div>üìç {course.address} ({course.city} {course.district})</div>
                          </div>
                        </div>

                        {/* Matching Reasons */}
                        {course.matchingReasons && course.matchingReasons.length > 0 && (
                          <div className="mt-3">
                            <p className="text-xs font-medium text-[#2F3036] mb-1">Ï∂îÏ≤ú Ïù¥Ïú†:</p>
                            <div className="flex flex-wrap gap-1">
                              {course.matchingReasons.map((reason, index) => (
                                <Badge key={index} variant="secondary" className="text-xs bg-[#F5F5DC]/50 text-[#2F3036]">
                                  {reason}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex items-center justify-between pt-4 border-t border-[#2F3036]/10">
                    <Badge variant="outline" className="border-[#2F3036]/20 text-[#2F3036]">
                      {course.category}
                    </Badge>
                    <div className="flex space-x-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="border-[#2F3036]/20 text-[#2F3036] hover:bg-[#F5F5DC]"
                        onClick={() => setLocation(`/individual/course-detail/${course.id}`)}
                        data-testid={`button-detail-course-${index}`}
                      >
                        ÏÉÅÏÑ∏Î≥¥Í∏∞
                      </Button>
                      
                      {!appliedCourses.has(course.id) ? (
                        <Button 
                          size="sm" 
                          className="bg-[#2F3036] text-white hover:bg-[#2F3036]/90"
                          onClick={() => handleApplyCourse(course)}
                          data-testid={`button-apply-course-${index}`}
                        >
                          Ïã†Ï≤≠ÌïòÍ∏∞
                        </Button>
                      ) : (
                        <Button 
                          size="sm" 
                          className="bg-green-600 text-white hover:bg-green-700"
                          onClick={() => handleCompleteCourse(course)}
                          disabled={addToResumeMutation.isPending}
                          data-testid={`button-complete-course-${index}`}
                        >
                          <Award className="w-4 h-4 mr-2" />
                          {addToResumeMutation.isPending ? 'Ï≤òÎ¶¨ Ï§ë...' : 'ÏàòÍ∞ïÏôÑÎ£å'}
                        </Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Empty State */}
        {filteredCourses && filteredCourses.length === 0 && !isLoading && (
          <Card>
            <CardContent className="p-12 text-center">
              <BookOpen className="w-16 h-16 text-[#2F3036]/30 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-[#2F3036] mb-2">Ï∂îÏ≤ú Í∞ïÏ¢åÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
              <p className="text-[#2F3036]/70 mb-4">
                ÌîÑÎ°úÌïÑÏùÑ Îçî ÏûêÏÑ∏Ìûà ÏûëÏÑ±ÌïòÏãúÎ©¥ ÎßûÏ∂§ Í∞ïÏ¢åÎ•º Ï∂îÏ≤úÌï¥ÎìúÎ¶ΩÎãàÎã§.
              </p>
              <Link href="/individual/profile-setup">
                <Button className="bg-[#2F3036] text-white hover:bg-[#2F3036]/90">
                  ÌîÑÎ°úÌïÑ ÏôÑÏÑ±ÌïòÍ∏∞
                </Button>
              </Link>
            </CardContent>
          </Card>
        )}
      </main>

      {/* Application Success Modal */}
      <Dialog open={showApplicationModal} onOpenChange={setShowApplicationModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader className="text-center">
            <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
              <CheckCircle2 className="w-8 h-8 text-green-600" />
            </div>
            <DialogTitle className="text-xl font-bold text-[#2F3036]">
              Ïã†Ï≤≠ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üéâ
            </DialogTitle>
            <DialogDescription className="sr-only">
              Í∞ïÏùò Ïã†Ï≤≠ ÏôÑÎ£å ÌôïÏù∏ Î™®Îã¨ÏûÖÎãàÎã§
            </DialogDescription>
          </DialogHeader>
          
          <div className="text-center space-y-4">
            {selectedCourse && (
              <div className="bg-[#F5F5DC] rounded-lg p-4">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <BookOpen className="w-5 h-5 text-[#FF8C42]" />
                  <span className="font-semibold text-[#2F3036]">{selectedCourse.title}</span>
                </div>
                <p className="text-[#2F3036]/70 text-sm">{selectedCourse.institution}</p>
              </div>
            )}
            
            <div className="text-sm text-[#2F3036]/70 space-y-2">
              <p>Í∞ïÏùò Ïã†Ï≤≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!</p>
              <p>Í∞ïÏùòÎ•º Î™®Îëê ÏàòÍ∞ïÌïòÏãúÎ©¥</p>
              <p><span className="font-medium text-[#FF8C42]">"ÏàòÍ∞ïÏôÑÎ£å"</span> Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨</p>
              <p>Ïù¥Î†•ÏÑúÏóê ÏàòÎ£åÏ¶ùÏùÑ Ï∂îÍ∞ÄÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.</p>
            </div>

            <Button 
              onClick={handleConfirmApplication}
              className="w-full bg-[#FF8C42] hover:bg-[#FF8C42]/90 text-white"
              data-testid="button-confirm-application"
            >
              ÌôïÏù∏
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}